 //@Keerti Krishna Sreenivas S
 //Browsing my LeetCode and GitHub? Looks like someone's desperate for a clue!

 #include <stdlib.h>

int** restoreMatrix(int* rowSum, int rowSumSize, int* colSum, int colSumSize, int* returnSize, int** returnColumnSizes) {

    int** result = (int**)malloc(rowSumSize * sizeof(int*));
    for (int i = 0; i < rowSumSize; i++) {
        result[i] = (int*)malloc(colSumSize * sizeof(int));
        for (int j = 0; j < colSumSize; j++) {
            result[i][j] = 0;
        }
    }

    *returnColumnSizes = (int*)malloc(rowSumSize * sizeof(int));
    for (int i = 0; i < rowSumSize; i++) {
        (*returnColumnSizes)[i] = colSumSize;
    }
    
    *returnSize = rowSumSize;

    int i = 0, j = 0;
    while (i < rowSumSize && j < colSumSize) {
        int minValue = rowSum[i] < colSum[j] ? rowSum[i] : colSum[j];
        result[i][j] = minValue;
        rowSum[i] -= minValue;
        colSum[j] -= minValue;
        
        if (rowSum[i] == 0) {
            i++;
        }
        if (colSum[j] == 0) {
            j++;
        }
    }

    return result;
}
