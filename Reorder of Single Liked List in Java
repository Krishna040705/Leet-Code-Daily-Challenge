class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }

        // 1) Find the middle point using tortoise and hare method
        ListNode slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // 2) Split the linked list in two halves
        // node1, head of first half 1 -> 2 -> 3
        // node2, head of second half 4 -> 5
        ListNode node1 = head;
        ListNode node2 = slow.next;
        slow.next = null;

        // 3) Reverse the second half, i.e., 5 -> 4
        node2 = reverseList(node2);

        // 4) Merge alternate nodes
        while (node1 != null || node2 != null) {

            // First add the element from first list
            if (node1 != null) {
                ListNode next = node1.next;
                node1.next = node2;
                node1 = next;
            }

            // Then add the element from second list
            if (node2 != null) {
                ListNode next = node2.next;
                node2.next = node1;
                node2 = next;
            }
        }
    }

    private ListNode reverseList(ListNode head) {
        ListNode prev = null, curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
