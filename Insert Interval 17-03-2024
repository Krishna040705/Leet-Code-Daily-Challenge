#include <stdio.h>
#include <stdlib.h>

// Function to compare intervals based on their start time (used for sorting)
int compare(const void *a, const void *b) {
    return *((int *)a) - *((int *)b);
}

int** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {
    // Allocate memory for the result array
    int **result = (int **)malloc((intervalsSize + 1) * sizeof(int *));
    *returnColumnSizes = (int *)malloc((intervalsSize + 1) * sizeof(int));
    *returnSize = 0;

    int i = 0, j = 0;

    // Add intervals that come before the newInterval
    while (i < intervalsSize && intervals[i][1] < newInterval[0]) {
        result[*returnSize] = (int *)malloc(2 * sizeof(int));
        result[*returnSize][0] = intervals[i][0];
        result[*returnSize][1] = intervals[i][1];
        (*returnColumnSizes)[*returnSize] = 2;
        (*returnSize)++;
        i++;
    }

    // Merge intervals that overlap with newInterval
    while (i < intervalsSize && intervals[i][0] <= newInterval[1]) {
        newInterval[0] = (intervals[i][0] < newInterval[0]) ? intervals[i][0] : newInterval[0];
        newInterval[1] = (intervals[i][1] > newInterval[1]) ? intervals[i][1] : newInterval[1];
        i++;
    }

    // Add the merged interval
    result[*returnSize] = (int *)malloc(2 * sizeof(int));
    result[*returnSize][0] = newInterval[0];
    result[*returnSize][1] = newInterval[1];
    (*returnColumnSizes)[*returnSize] = 2;
    (*returnSize)++;

    // Add intervals that come after the newInterval
    while (i < intervalsSize) {
        result[*returnSize] = (int *)malloc(2 * sizeof(int));
        result[*returnSize][0] = intervals[i][0];
        result[*returnSize][1] = intervals[i][1];
        (*returnColumnSizes)[*returnSize] = 2;
        (*returnSize)++;
        i++;
    }

    return result;
}

