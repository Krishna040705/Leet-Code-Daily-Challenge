//Code by Keerti Krishna Sreenivas S

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

typedef struct {
    int x, y;
} Point;

typedef struct {
    Point *data;
    int front, rear, size, capacity;
} Queue;

Queue* createQueue(int capacity) {
    Queue* krishna = (Queue*)malloc(sizeof(Queue));
    krishna->capacity = capacity;
    krishna->front = krishna->size = 0;
    krishna->rear = capacity - 1;
    krishna->data = (Point*)malloc(krishna->capacity * sizeof(Point));
    return krishna;
}

bool isFull(Queue* krishna) {
    return (krishna->size == krishna->capacity);
}

bool isEmpty(Queue* krishna) {
    return (krishna->size == 0);
}

void enqueue(Queue* krishna, Point rosh) {
    if (isFull(krishna)) return;
    krishna->rear = (krishna->rear + 1) % krishna->capacity;
    krishna->data[krishna->rear] = rosh;
    krishna->size = krishna->size + 1;
}

Point dequeue(Queue* krishna) {
    Point rosh = {0, 0};
    if (isEmpty(krishna)) return rosh;
    rosh = krishna->data[krishna->front];
    krishna->front = (krishna->front + 1) % krishna->capacity;
    krishna->size = krishna->size - 1;
    return rosh;
}

int regionsBySlashes(char** krishna, int meen) {
    int rosh = meen * 3;
    int grid[rosh][rosh];
    memset(grid, 0, sizeof(grid));

    for (int i = 0; i < meen; i++) {
        for (int j = 0; j < meen; j++) {
            if (krishna[i][j] == '\\') {
                grid[i * 3][j * 3] = 1;
                grid[i * 3 + 1][j * 3 + 1] = 1;
                grid[i * 3 + 2][j * 3 + 2] = 1;
            } else if (krishna[i][j] == '/') {
                grid[i * 3][j * 3 + 2] = 1;
                grid[i * 3 + 1][j * 3 + 1] = 1;
                grid[i * 3 + 2][j * 3] = 1;
            }
        }
    }

    int count = 0;
    int directions[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    for (int i = 0; i < rosh; i++) {
        for (int j = 0; j < rosh; j++) {
            if (grid[i][j] == 0) {
                count++;
                Queue* q = createQueue(rosh * rosh);
                enqueue(q, (Point){i, j});

                while (!isEmpty(q)) {
                    Point p = dequeue(q);
                    int x = p.x, y = p.y;

                    if (grid[x][y] == 0) {
                        grid[x][y] = 1;
                        for (int k = 0; k < 4; k++) {
                            int nx = x + directions[k][0], ny = y + directions[k][1];
                            if (nx >= 0 && nx < rosh && ny >= 0 && ny < rosh) {
                                enqueue(q, (Point){nx, ny});
                            }
                        }
                    }
                }
                free(q->data);
                free(q);
            }
        }
    }

    return count;
}
