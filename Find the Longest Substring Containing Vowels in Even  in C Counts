//Code by Keerti Krishna Sreenivas S
#include <stdio.h>
#include <string.h>

int findTheLongestSubstring(char* s) {
    // Map to store the first occurrence of each state
    int stateMap[32]; 
    for (int i = 0; i < 32; i++) {
        stateMap[i] = -2;  // Initialize all positions with -2
    }
    stateMap[0] = -1; // Initial state before the string starts

    int state = 0; // Initial state
    int maxLength = 0;

    for (int i = 0; i < strlen(s); i++) {
        char c = s[i];

        // Update the state based on the current character
        if (c == 'a') {
            state ^= 1 << 0;
        } else if (c == 'e') {
            state ^= 1 << 1;
        } else if (c == 'i') {
            state ^= 1 << 2;
        } else if (c == 'o') {
            state ^= 1 << 3;
        } else if (c == 'u') {
            state ^= 1 << 4;
        }

        // If this state has been seen before, calculate the length of the substring
        if (stateMap[state] != -2) {
            maxLength = (i - stateMap[state]) > maxLength ? (i - stateMap[state]) : maxLength;
        } else {
            stateMap[state] = i;
        }
    }

    return maxLength;
}

int main() {
    char s[] = "eleetminicoworoep";
    printf("The longest substring length is: %d\n", findTheLongestSubstring(s));
    return 0;
}
