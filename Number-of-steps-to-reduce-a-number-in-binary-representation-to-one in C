
void divide(char* s)
{
    int i =0;
    int len = strlen(s);
    for(i=len-2;i>=0;i--)
    {
        s[i+1] = s[i];
    }
    s[0] = '0';
}

void add(char* s)
{
    int i = 0;
    int len = strlen(s);
    int sum = 0;
    int carry = 1;
    for(i=len-1;i>=0;i--)
    {
        sum = (s[i]-'0')+carry;
        if(sum == 0)
        {
            carry = 0;
        }
        else if(sum == 1)
        {
            carry = 0;
        }
        else if(sum == 2)
        {
            carry = 1;
            sum = 0;
        }
        else if(sum == 3)
        {
            carry = 1;
            sum = 1;
        }
        s[i]  = sum + '0';
    }
    
}

int countOnes(char* s)
{
    int i = 0;
    int len = strlen(s);
    int count = 0;
    for(i=0;i<len-1;i++)
    {
        if(s[i] == '1')
        {
            return 0;
        }
    }
    return s[len-1]-'0';
}

int numSteps(char * s){
    
    int len = strlen(s);
    int i = 0;
    int count = 0;
    int overallCount = 0;
    char* k = (char*)malloc(sizeof(char)*(len+2)); 
    for(i=0;i<len;i++)
    {
        k[i+1] = s[i]; 
    }
    k[0] = '0';
    k[len+1] = '\0';
    count = countOnes(k);
    len = strlen(k);
    while(count != 1)
    {
        if(k[len-1] == '0')
        {
            divide(k);
        }
        else
        {
            add(k);
        }
        count = countOnes(k);
        overallCount++;
    }
    return overallCount;
    
}
